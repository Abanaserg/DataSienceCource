keywords
False - ложь.
True - правда
None - “пустой" объект
and - логическое и
with / as - менеджер контекста
assert условие - возбуждающее искючение, если условие ложно
break - выход из цикла
class - пользовательский тип, состоящий из методов и атрибутов
continue - переход на следующую итерацию цикла
def - определние функции
del - удаление объекта
elif - в противном случае, если
else - for/else (роверка выхода из цикла) if/else если условие не выполнено
except - перехватить исключение
finally - вмете с инструкцией try, выполняет инструкции независимо от того, было ли исключение или нет
for - цикл 
from - импорт нескольких функций из модуля
global - позволяет сделать значение переменной, присвоенное ей внутри функции доступным за пределом функции
if - если
import - импорт модуля
in - проверка на вхождение
is - ссылаются ли 2 объекта на одно и тоже место в памяти
lambda переменные:фозвращаемаое значение - определение анонимной функции
nonlocal - позвояет сделать значение переменой, прислвоенное ей внутри функции доступным в объемлющей инструкции
not - логическое не
or - логическое или
pass - ничего не делающая конструкция
raise - возбудить исключение
return - вернуть результат
try - выполнить инструкцию, перехватывая исключение
while - цикл while.
yield - опредление функции-генератора

Inside functions for type converting
bool(x) - преобразование к типу bool, использующая стандартную процедуру проверки истиности. Если x является ложным или опущен, возвращает значение False, в противном случае она возвращает True
bytearray([object], [кодировка], [ошибки]) - преобразование bytearray. Bytearray изменяемая последовательность целых цисел в диапазоне 0-256. Вызванная без аргументов, возращает пустой массив байт
bytes([object], [кодировка], [ошибки]) - возвращает объект типа bytes, который является неименяемой последотельностью целых чисел в в диапазоне 0-256. Аргументы конструктора интерпретируются как для bytearray()
complex([real[, imag]]) - преобрзование к комлексному числу
dict([object]) - преобразование к словарю
2oat([X]) - преобразование к числу с плавающей точкой, Если аргумент не указан, возвращает 0.0.
frozenset([последовательность) - возвращает неизменяемое множество
int([object], [основание системы счисления]) - преобразование к целому числу
list([object]) - создает список
memoryview([object]) - создает объект memoryview.
object() - возращает безликий объект, являющийся базовым для всех объектов
range([start=0], stop, [step=1]) - арифметическая прогрессия от start до stop с шагом step.
set([object]) - создает множество
slice([start=0], stop, [step=1]) - объект среза от start до stop с шагом step.
str([object], [кодировка], [ошибки]) - строковое представление объекта, использует метод __str__.
tuple(obj) - преобразование к кортежу

Other inside functions
abs(x) - возращает абсолютную величину (модуль) числа
all(последовательность) - возращает true, если все элементы истинные (или, если последовательность пуста)
any(последовательность) - возращает True, если хотябы один элеметн истина. для пустой последовательности возращает False.
ascii(object) - как repr() возращает строку, содержащую представление объекта, но заменяие не-ANSII символы на экранированные последовательности
bin(x) - преобразование целого числа в двоичную строку
callable(x) - возращает true для объекта, поддерживающего вызов (как функии)
chr(x) - возращает односимвольную строку, код символа которой равен X
classmethod(x) - представляет указанную функцию методом класса
compile(source, 1lename, mode, 2ags=0, dont_inherit=False) - компиляция в программный код, который впоследствии может выполняться функцией eval или exec. Строка не должна содержать символов возврата каретки или нулевые байты
delattr(object, name) - удаляет атрибут с именем name
dir([object]) - список имен объекта, а если объект не указан, список имен текущей локальной области видимости
divmod(a, b) - возращает частное и остаток от деления a на b
enumerate(iterable, start=0) - возращает итератор, при каждом проходе предоставляющем кортеж из номера и соответствующего члена (индекса) последовательности
eval(expression, globals=None, locals=None) - Выполняет строку программного кода
exec(object[, globals[, locals]]) - Выполняет программный код на Python.
filter(function, iterable) - возращает итератор из тех элементов, для которых function возращает истину
format(value[,format_spec]) - форматирование (обычно форматирование строки)
getattr(object, name ,[default]) - извлекает атрибут объекта или default
globals() - Словарь глобальных имен
hasattr(object, name) - имеет ли объект атрибут с именем name
hash(x) - возращает хещ указанного объекта
help([object]) - вызов встроенной справочной системы
hex(U) - Преобрахование целого числа в шестнацатеричную строку
id(object) - Возращает "адрес" объекта. Это целое число , которое гарантированно будет уникальным и постоянным для данного объекта в течении срока его существования.
input([prompt]) - Возращает введенную польщователем строку. Prompt - подсказка пользователю
isinstance(object, ClassInfo) - Истина, если объект является экземпляром ClassInfo или его подклассом. Если объект не является объектом данного типа, функция всегда возращает ложь
issubclass(NOCOO, ClassInfo) - Истина, если класс является подклассом ClassInfo. Класс считается подклассом себя
iter(x) - возращает объект итератора
len(x) - Возращает число элементов в указанном объекте
locals() - Словарь локальных имен
map(function, iterator) - Итератор, получившийся после применения к каждому элементу списка функций function.
max(iter, [args ...] * [, key]) - Максимальный элемент последовательности
min(iter, [args ...] * [, key]) - Минимальный элемент последовательности
next(x) - Возращает следующий элемент итератора
oct(U) - Преобразование целого числа в восьмеричную строку
open(1le, mode=’r’, buffering=None, encoding=None, errors=None, newline=None,closefd=True) - открывает файл и возращает соответствующий поток
ord(O) - код символа
pow(x, y,[r]) - ( x ** y ) % r.
reversed(object) - Итератор из развернутого объекта
repr(obj) - Представление объекта
print([object, ...], *, sep=” ”, end=’\n’, 1le=sys.stdout) - Печать
property(fget=None, fset=None, fdel=None, doc=None)
round(X [, N]) - округление до N знаков после запятой
setattr(объект, имя, значение) - Устанавливает атрибут объекта
sorted(iterable[, key][, reverse]) - Отсортированный список
staticmethod(function) - Статический метод для функции
sum(iter, start=0) - сумма членов последовательности
super([тип [, объект или тип]]) - доступ к родительскому классу
type(object) - возращает тип объекта
type(name, bases, dict) - Возращает новый экземпляр класса name
vars([object]) - Словарь из атрибутов объекта. По умолчанию-словарь локальных имен
zip(*iters) - Итератор, возращающий кортежи, состоящие из соответствующих элементов аргументов-последовательностей (создание кортежа из элементов списков)
find(substr) - определённый для строк, позволяет находить символы и подстроки
строка.replace('что', "на что") - замена занчений в строке

methods

Lists
operator.split(разделитель) - создание списка разделив строку с помощью указанного разделителя
'разделитель'.join(список) - объединение элементов списка в строку через разделитель
список.append(значение) - добавление элемента в список (в конец)
список.extend(список/значение) - позволяет расширять список новым списком
список.remove(значение) - удаление первого вхожддение элемента в списке
список.pop(индекс) - удаление элемента списка под заданым индексом. по умолчанию удаляет последний индекс
список.index(значение,начальный индекс) - возращает индекс первого значения	
список.index(значение,начальный индекс) - возращает индекс первого значения	
список.count(значение) - подсчитывает количество значений в списке
список.sort(reverse=true/false) - сортирует список по убыванию/возрастанию. Без указания направления сортирует по возрастанию
список.insert(значение, позиция) вставка значения на опредленную позицию. При этом весь список увеличивается на 1 элемент
список(начало:конец+1:шаг) - вывод списка от начала до концца с шаго (по умолчанию шаг 1)
список.copy() - создание нового списка. без copy будет ссыдаться на тот же id и опреации с новым списком приведут к изменинию в старом

Dict
словарь.keys() - вывести список "ключей" словаря
словарь.values() - вывести список значений словаря
словарь.pop(ключ) - удалить объект из словаря по ключу
словарь.update([]) - добавить элементы в словарь
словарь.setdefault(ключ,описание) - выаод значения по ключу, если ключ не существует выводится "описание"

Sets
множество.add(элемент) - добавление элемента во множество
множество1.union(множество2) - объединение множеств
множество1.intersection(множество2) -пересечение множеств
множество1.difference(множество2) - возвращает множество1 без элементов, встречающихся в множестве 2
элемент in множество - проверка наличия элемента во множестве

Functions
def function_name(a,b,c=n) создание функции с именем function_name и аргументами a, b, c при этом в случае не объявления fhuevtynf c значение будет принято по умолчанию n
	
Patern fo decorartor
def my_decorator(fn):
    print("Этот код будет выведен один раз в момент декорирования функции")
    def wrapper(*args, **kwargs):
        print('Этот код будет выполняться перед каждым вызовом функции')
        result = fn(*args, **kwargs)
        print('Этот код будет выполняться после каждого вызова функции')
        return result
    return wrapper
